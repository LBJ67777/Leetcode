1. Two Sum

问题：
给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。

示例:
给定 nums = [2, 7, 11, 15], target = 9
因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]

---------------------------------
解法一：暴力破解  
时间复杂度 O（N2）,其中N是数组的元素数量，最坏的情况下数组中的任意两个数都要被匹配一次
空间复杂度 O（1）

class Solution {
    public int[] twoSum(int[] nums, int target) {
        for(int i = 0; i < nums.length; i++){
            for(int j = i+1; j < nums.length; j++){
                if(nums[i] + nums[j] == target)
                    return new int[]{i,j};
            }
        }
        return new int[2];
            
    }
}


-------------------------------
解法二：哈希表
创建哈希表，对于每一个x，查找表中是否还有target-x，然后将x插入到哈希表中
时间复杂度O（N），N为数组的遍历。
空间复杂度O（N），哈希表的开销
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer , Integer> map = new HashMap<Integer , Integer>();
        for(int i = 0; i < nums.length ;i++){
                if(map.containsKey(target-nums[i])){
                    return new int[]{map.get(target-nums[i]) , i};
                }
                map.put(nums[i] , i);            
            }
        return new int[]{0 , 0};
    }
}

